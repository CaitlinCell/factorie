FACTORIE is a toolkit for deployable probabilistic modeling, implemented as a library in [http://www.scala-lang.org Scala].  It provides its users with a succinct language for creating relational [http://en.wikipedia.org/wiki/Factor_graph factor graphs], estimating parameters and performing inference.  It has been successfully demonstrated on many problems in natural language processing and information integration, including
  * named entity recognition
  * entity resolution
  * relation extraction
  * parsing
  * schema matching
  * ontology alignment
  * canonicalization
  * latent-variable generative models, including latent Dirichlet allocation

It is object-oriented in that variables, factor templates, inference procedures and learning methods are all objects, supporting inheritance, polymophism, composition, and encapsulation.
It has been designed for scalability and speed, easily handling millions of variables and factors.  Its current emphasis is on MCMC inference, online training, and discriminative parameter estimation.  However, it also supports generative models (such as latent Dirichlet allocation), and in the future will provide variational inference, including mean-field methods and loopy belief propagation.

FACTORIE's key distinguishing facet is its use of an imperative (procedural) approach to defining various aspects of factor graph construction, inference and learning--an approach we term "imperative-defined factor graphs".  The power in relational models is in their repeated structure and tied parameters; at issue is how to define these structures in a powerful and flexible way.  Rather than forcing the use of a declarative language, such as SQL or first-order logic, we advocate the flexibility of an imperative language to express these things.  By combining the traditional, declarative, statistical semantics of factor graphs with imperative definitions of their construction and operation, we allow the user to mix declarative and procedural domain knowledge, and also gain significant efficiencies.  If desired, we also make available declarative expressions of factor graph structure, including an _entity-relationship_ language for expressive arbitrary compatibilities among related variables, and _first-order logic_ for factors with boolean sufficient statistics.  These three types of expressions can be mixed in the same model.

The current FACTORIE source code is version 0.8.x.  Although pre-1.0, it is already extremely useful and quite stable.  You can browse our [http://code.google.com/p/factorie/issues/list list of outstanding issues].  When [http://www.scala-lang.org/node/1564 Scala version 2.8] is released we will begin work on FACTORIE version 0.9.x.  We hope to release version 1.0 in early 2010.

