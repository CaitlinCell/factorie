#!/bin/bash

factoriedir=`dirname $0`
factoriedir=`dirname $factoriedir`

factoriejar=$factoriedir/target/factorie-1.0-SNAPSHOT-jar-with-dependencies.jar
factorienlpjar=$factoriedir/target/factorie-1.0-SNAPSHOT-nlp-jar-with-dependencies.jar

if [ -e $factorienlpjar ] ; then
  jar=$factorienlpjar
elif [ -e $factoriejar ] ; then
  jar=$factoriejar
else
  echo Jar not found $factoriejar
  exit -1
fi

# This makes -Xmx value command-line changeable
MEMORY=3g

# Make this a scala command
JAVA_COMMAND="java -Xmx$MEMORY -ea -Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -cp $jar"

CMD=$1
shift

help()
{
cat <<EOF
Factorie commands: 

  import-dir         load the contents of a directory into factorie instances (one per file)
  import-file        load a single file into factorie instances (one per line)
  import-svmlight    load SVMLight format data files into Factorie instances
  train-classifier   train a classifier from Factorie data files
  classify-dir       classify data from a single file with a saved classifier
  classify-file      classify the contents of a directory with a saved classifier
  classify-svmlight  classify data from a single file in SVMLight format
  train-topics       train a topic model from Factorie data files
  infer-topics       use a trained topic model to infer topics for new documents
  evaluate-topics    estimate the probability of new documents under a trained model
  hlda               train a topic model using Hierarchical LDA
  prune              remove features based on frequency or information gain
  split              divide data into testing, training, and validation portions

Include --help with any option for more information
EOF
}

CLASS=

case $CMD in
	nlp) CLASS=cc.factorie.app.nlp.NLP;;
	lda) CLASS=cc.factorie.app.topics.lda.LDA;;
	run) CLASS=$1; shift;;
	*) echo "Unrecognized command: $CMD"; help; exit 1;;
esac

$JAVA_COMMAND $CLASS $*
